package com.psnm.cp.xyz.xyz.biz;

import static org.junit.Assert.*;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringReader;

import nexcore.framework.core.util.FileUtils;

import org.apache.commons.httpclient.Header;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.cookie.CookiePolicy;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.StringRequestEntity;
import org.apache.commons.lang.StringUtils;
import org.jdom.Document;
import org.jdom.input.SAXBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import junit.framework.Assert;
import com.google.gson.Gson;
import nexcore.tool.utm.project.dataset.util.GsonConvertingUtil;

/**
 * @uTestcaseID b4477519-f5bf-45d0-bea5-f24e455b6f4d
 * @uCreator admin
 * @uCreateDate 2014-11-04 10:24:881
 * @uDescription 
 * @uAutoGenerated By NEXCORE Framework 
 * @uSee com.psnm.cp.xyz.xyz.biz.P001
 */
public class P001TestCase {

	/** TESTCASE HTTP URL */
	private String testCaseHttpUrl = "http://localhost:8088/web/xml.xmd";
	/** TESTCASE FOLDER */
	private String testCasePath = null;
	/** HttpClient */
	private HttpClient client = null;
	/** PostMethod */
	private PostMethod xmlPost = null;

	@Before
	public void setUp() throws Exception {
		testCaseHttpUrl = System.getProperty("testcase.httpUrl",
				testCaseHttpUrl);
		testCasePath = System.getProperty("testcase.path");

		client = new HttpClient();
		client.getParams().setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);
		xmlPost = new PostMethod(testCaseHttpUrl);
		xmlPost.setRequestHeader(new Header("User-Agent", "Firefox"));
	}

	@After
	public void tearDown() throws Exception {
	}

	/** 
	 * XML 파일을 읽어서 문자열로 반환한다.
	 */
	protected String readXml(String fileName) throws IOException {
		InputStream in = new BufferedInputStream(getClass()
				.getResourceAsStream(fileName));
		byte[] buffer = new byte[in.available()];

		in.read(buffer, 0, buffer.length);
		in.close();

		return new String(buffer, "UTF-8");
	}

	/** 
	 * XML 형태의 요청을 송신하고, Response XML을 리턴함
	 */
	protected String sendXmlRequest(String requestXml) {
		String responseBody = "";
		try {
			xmlPost.setRequestEntity(new StringRequestEntity(requestXml,
					"text/xml", "UTF-8"));
			client.executeMethod(xmlPost);
			responseBody = xmlPost.getResponseBodyAsString();
		} catch (Exception e) {
			e.printStackTrace();
			fail("getResponseByXmlRequest() Exception : " + e);
		} finally {
			xmlPost.releaseConnection();
		}
		return responseBody;
	}

	/** 
	 * 수신된 Response XML 내용을 디버깅
	 */
	protected void debugResponseXml(String responseXml, String requestXmlName,
			String responseXmlName) throws IOException {
		String resultFileName = "";
		if (testCasePath != null && testCasePath.trim().length() > 0) {
			resultFileName = testCasePath + "/";
		} else {
			String requestFileName = getClass().getResource(requestXmlName)
					.getFile();
			String[] fileFragments = StringUtils.split(requestFileName, "/");
			for (int i = 0; i < fileFragments.length - 1; i++) {
				resultFileName += fileFragments[i] + "/";
			}
		}
		resultFileName += responseXmlName;
		System.out.println(resultFileName);
		System.out.println(responseXml);

		File responseFile = new File(resultFileName);
		if (!responseFile.exists()) {
			responseFile.createNewFile();
		}
		FileUtils.write(responseXml, resultFileName);
	}

	/** 
	 * XML 문서로부터 JDOM Document 획득
	 */
	protected Document parseXml(String resultXml) {
		Document doc = null;
		try {
			SAXBuilder builder = new SAXBuilder();
			Reader reader = new StringReader(resultXml);
			doc = builder.build(reader);
		} catch (Exception e) {
			e.printStackTrace();
			fail("getDomDocument() Exception : " + e);
		}
		return doc;
	}

	/**
	 * @uTestcaseID 6a8c3945-8ee7-4c7e-9022-1a8bd5606624
	 * @uCreator admin
	 * @uCreateDate 2014-11-04 10:24:225
	 * @uDescription 
	 * @uAutoGenerated By NEXCORE Framework 
	 * @uSee com.psnm.cp.xyz.xyz.biz.P001#p00102(IDataSet, IOnlineContext)
	 * @uReturnType IDataSet
	 */
	@Test
	public void testP00102() {
		// fail("Not yet implemented");
	}

	/**
	 * @uTestcaseID 73d5e1f6-c998-45c3-8a86-44666bdfc169
	 * @uCreator admin
	 * @uCreateDate 2014-11-04 10:24:318
	 * @uDescription 
	 * @uAutoGenerated By NEXCORE Framework 
	 * @uSee com.psnm.cp.xyz.xyz.biz.P001#p00103(IDataSet, IOnlineContext)
	 * @uReturnType IDataSet
	 */
	public void testP00103() {
		// fail("Not yet implemented");
	}

	/**
	 * @uTestcaseID 8ca35698-3d92-4f05-a1be-003f12fbb438
	 * @uCreator admin
	 * @uCreateDate 2014-11-04 10:24:381
	 * @uDescription 
	 * @uAutoGenerated By NEXCORE Framework 
	 * @uSee com.psnm.cp.xyz.xyz.biz.P001#p00101(IDataSet, IOnlineContext)
	 * @uReturnType IDataSet
	 */
	public void testP00101() {
		// fail("Not yet implemented");
	}

	/**
	 * @uTestcaseID 876d0163-94cc-46e5-ae01-d0d2d8dcafa9
	 * @uCreator admin
	 * @uCreateDate 2014-11-04 10:24:10
	 * @uDescription 
	 * @uAutoGenerated By DataSet
	 * @uSee com.psnm.cp.xyz.xyz.biz.P001#p00102(IDataSet,IOnlineContext)
	 * @uReturnType IDataSet
	 */
	@Test
	public void testP00102201411041024080000() throws Exception {
		String requestXml = readXml("request-testP00102201411041024080000.xml");
		String responseXml = sendXmlRequest(requestXml);
		debugResponseXml(responseXml,
				"request-testP00102201411041024080000.xml",
				"response-testP00102201411041024080000.xml");
		Document doc = parseXml(responseXml);
		org.jdom.Element element = null;
		element = (org.jdom.Element) org.jdom.xpath.XPath.selectSingleNode(doc,
				"/response/dataSet/message/result");
		if (element != null)
			assertEquals("OK", element.getText());
	}
}
